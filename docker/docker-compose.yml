version: '3.7'
networks:
  backend:
    driver: '${NETWORKS_DRIVER}'
  frontend:
    driver: '${NETWORKS_DRIVER}'

volumes:
  monitor_percona:
    driver: '${VOLUMES_DRIVER}'
  monitor_postgres:
    driver: '${VOLUMES_DRIVER}'
  monitor_sonarqube:
    driver: '${VOLUMES_DRIVER}'

services:
  percona:
    container_name: '${APP_NAME}_percona'
    build:
      context: ./etc/percona
      args:
        - 'PERCONA_VERSION=${PERCONA_VERSION}'
    environment:
      - 'MYSQL_DATABASE=${PERCONA_DATABASE}'
      - 'MYSQL_USER=${PERCONA_USER}'
      - 'MYSQL_PASSWORD=${PERCONA_PASSWORD}'
      - 'MYSQL_ROOT_PASSWORD=${PERCONA_ROOT_PASSWORD}'
    volumes:
      - monitor_percona:/var/lib/mysql
      - ./etc/percona/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d'
    ports:
      - "${PERCONA_PORT}:3306"
    networks:
      - backend
  postgres:
    container_name: '${APP_NAME}_postgres'
    #    restart: unless-stopped
    build:
      context: ./etc/postgres
      args:
        - 'POSTGRES_VERSION=${POSTGRES_VERSION}'
    volumes:
      - monitor_postgres:/var/lib/postgresql/data
      - './etc/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d'
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - 'POSTGRES_DB=${POSTGRES_DB}'
      - 'POSTGRES_USER=${POSTGRES_USER}'
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
      - 'SONARQUBE_POSTGRES_INIT=${SONARQUBE_POSTGRES_INIT}'
      - 'SONARQUBE_POSTGRES_DB=${SONARQUBE_POSTGRES_DB}'
      - 'SONARQUBE_POSTGRES_USER=${SONARQUBE_POSTGRES_USER}'
      - 'SONARQUBE_POSTGRES_PASSWORD=${SONARQUBE_POSTGRES_PASSWORD}'
    networks:
      - backend
      
  sonarqube:
    build:
      context: ./etc/sonarqube
    hostname: "${SONARQUBE_HOSTNAME}"
    volumes:
      - ${DATA_PATH_HOST}/sonarqube/conf:/opt/sonarqube/conf
      - ${DATA_PATH_HOST}/sonarqube/data:/opt/sonarqube/data
      - ${DATA_PATH_HOST}/sonarqube/logs:/opt/sonarqube/logs
      - ${DATA_PATH_HOST}/sonarqube/extensions:/opt/sonarqube/extensions
      - ${DATA_PATH_HOST}/sonarqube/plugins:/opt/sonarqube/lib/bundled-plugins
    ports:
      - ${SONARQUBE_PORT}:9000
    depends_on:
      - postgres
    environment:
      - sonar.jdbc.username=${SONARQUBE_POSTGRES_USER}
      - sonar.jdbc.password=${SONARQUBE_POSTGRES_PASSWORD}
      - sonar.jdbc.url=jdbc:postgresql://${SONARQUBE_POSTGRES_HOST}:5432/${SONARQUBE_POSTGRES_DB}
    networks:
      - backend
      - frontend
      
  php-cli:
    container_name: '${APP_NAME}_php_cli'
    environment:
      - 'TZ=${TIMEZONE}'
    build:
      context: ./etc/php-cli
      args:
        - 'INSTALL_NODE=${INSTALL_NODE}'
        - 'INSTALL_GULP=${INSTALL_GULP}'
        - 'INSTALL_BOWER=${INSTALL_BOWER}'
        - 'INSTALL_POSTGRESQL=${INSTALL_POSTGRESQL}'
        - 'INSTALL_MYSQL=${INSTALL_MYSQL}'
        - 'INSTALL_XDEBUG=${INSTALL_XDEBUG}'
        - 'INSTALL_MONGODB=${INSTALL_MONGODB}'
        - 'INSTALL_FAKETIME=${INSTALL_FAKETIME}'
        - 'INSTALL_WKHTMLTOPDF=${INSTALL_WKHTMLTOPDF}'
        - 'PHP_VERSION=${PHP_VERSION}'
    ports:
      - '2222:22'
      - '9000:9000'
    tty: true
    restart: on-failure
    volumes:
      - './etc/php-fpm/php.ini:/usr/local/etc/php/conf.d/php.ini:cached'
      - '${APP_PATH}/source:/var/www/html'
      - '${APP_PATH}/upload:/var/www/upload'
      - './etc/php-fpm/entrypoint.sh:/bin/entrypoint.sh'
    networks:
      - backend
  php-fpm:
    build:
      context: ./etc/php-fpm
      args:
        - 'INSTALL_NODE=${INSTALL_NODE}'
        - 'INSTALL_GULP=${INSTALL_GULP}'
        - 'INSTALL_BOWER=${INSTALL_BOWER}'
        - 'INSTALL_POSTGRESQL=${INSTALL_POSTGRESQL}'
        - 'INSTALL_MYSQL=${INSTALL_MYSQL}'
        - 'INSTALL_XDEBUG=${INSTALL_XDEBUG}'
        - 'INSTALL_MONGODB=${INSTALL_MONGODB}'
        - 'INSTALL_FAKETIME=${INSTALL_FAKETIME}'
        - 'INSTALL_WKHTMLTOPDF=${INSTALL_WKHTMLTOPDF}'
        - 'PHP_VERSION=${PHP_VERSION}'
        - 'PHP_UPSTREAM_PORT=${APACHE_PHP_UPSTREAM_PORT}'
        - 'PHP_UPSTREAM_CONTAINER=${APACHE_PHP_UPSTREAM_CONTAINER}'
    container_name: '${APP_NAME}_php_fpm'
    environment:
      - 'TZ=${TIMEZONE}'
    restart: on-failure
    volumes:
      - './etc/php-fpm/php.ini:/usr/local/etc/php/conf.d/php.ini:cached'
      - '${APP_PATH}/source:/var/www/html'
      - '${APP_PATH}/upload:/var/www/upload'
      - './etc/php-fpm/entrypoint.sh:/bin/entrypoint.sh'
    networks:
      - backend
      
  redis:
    container_name: '${APP_NAME}_redis'
    environment:
      - 'TZ=${TIMEZONE}'
    image: redis
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - '${DATA_PATH_HOST}/redis:/data'
    restart: on-failure
    networks:
      - backend      
      
  apache2:
    container_name: '${APP_NAME}_apache2'
    build:
      context: ./etc/apache2
      args:
        - PHP_UPSTREAM_CONTAINER=${APACHE_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${APACHE_PHP_UPSTREAM_PORT}
        - PHP_UPSTREAM_TIMEOUT=${APACHE_PHP_UPSTREAM_TIMEOUT}
        - DOCUMENT_ROOT=${APACHE_DOCUMENT_ROOT}
        - APACHE_INSTALL_HTTP2=${APACHE_INSTALL_HTTP2}
    volumes:
      - ${APP_PATH}/source:/var/www/html
      - ${APP_PATH}/upload:/var/www/upload
      - ${APACHE_HOST_LOG_PATH}:/var/log/apache2
    ports:
      - "${APACHE_HOST_HTTP_PORT}:80"
      - "${APACHE_HOST_HTTPS_PORT}:443"
    depends_on:
      - php-fpm
    networks:
      - frontend
      - backend

  mginx:
    build:
      context: ./etc/nginx
      args:
        - 'PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}'
        - 'PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}'
        - http_proxy
        - https_proxy
        - no_proxy
    container_name: '${APP_NAME}_nginx'
    environment:
      - 'TZ=${TIMEZONE}'
    ports:
      - '${PORT_HTTP}:80'
      - '${PORT_HTTPS}:443'
      - '3030:3030'
    restart: on-failure
    volumes:
      - '${APP_PATH}/source:/var/www/html'
      - '${APP_PATH}/upload:/var/www/upload'
      - './logs/nginx/:/var/log/nginx'
    depends_on:
      - php-fpm
    networks:
      backend:
        aliases:
          - '${APP_HOST}' 